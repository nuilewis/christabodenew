// Mocks generated by Mockito 5.4.4 from annotations
// in christabodenew/test/providers/devotional_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:christabodenew/core/errors/failure.dart' as _i7;
import 'package:christabodenew/models/devotional_model.dart' as _i8;
import 'package:christabodenew/repositories/devotional_repository.dart' as _i5;
import 'package:christabodenew/services/devotional/devotional_firestore_service.dart'
    as _i2;
import 'package:christabodenew/services/devotional/devotional_hive_service.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDevotionalFirestoreService_0 extends _i1.SmartFake
    implements _i2.DevotionalFirestoreService {
  _FakeDevotionalFirestoreService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDevotionalHiveService_1 extends _i1.SmartFake
    implements _i3.DevotionalHiveService {
  _FakeDevotionalHiveService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DevotionalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDevotionalRepository extends _i1.Mock
    implements _i5.DevotionalRepository {
  @override
  _i2.DevotionalFirestoreService get devotionalFirestoreService =>
      (super.noSuchMethod(
        Invocation.getter(#devotionalFirestoreService),
        returnValue: _FakeDevotionalFirestoreService_0(
          this,
          Invocation.getter(#devotionalFirestoreService),
        ),
        returnValueForMissingStub: _FakeDevotionalFirestoreService_0(
          this,
          Invocation.getter(#devotionalFirestoreService),
        ),
      ) as _i2.DevotionalFirestoreService);

  @override
  _i3.DevotionalHiveService get devotionalHiveService => (super.noSuchMethod(
        Invocation.getter(#devotionalHiveService),
        returnValue: _FakeDevotionalHiveService_1(
          this,
          Invocation.getter(#devotionalHiveService),
        ),
        returnValueForMissingStub: _FakeDevotionalHiveService_1(
          this,
          Invocation.getter(#devotionalHiveService),
        ),
      ) as _i3.DevotionalHiveService);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>> getDevotionals(
          {String? year}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevotionals,
          [],
          {#year: year},
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.Devotional>>(
          this,
          Invocation.method(
            #getDevotionals,
            [],
            {#year: year},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.Devotional>>(
          this,
          Invocation.method(
            #getDevotionals,
            [],
            {#year: year},
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, _i8.Devotional>> getCurrentDevotional() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentDevotional,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i8.Devotional>>.value(
            _FakeEither_2<_i7.Failure, _i8.Devotional>(
          this,
          Invocation.method(
            #getCurrentDevotional,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, _i8.Devotional>>.value(
                _FakeEither_2<_i7.Failure, _i8.Devotional>(
          this,
          Invocation.method(
            #getCurrentDevotional,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i8.Devotional>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, int>> getCurrentDevotionalIndex() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentDevotionalIndex,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, int>>.value(
            _FakeEither_2<_i7.Failure, int>(
          this,
          Invocation.method(
            #getCurrentDevotionalIndex,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, int>>.value(
                _FakeEither_2<_i7.Failure, int>(
          this,
          Invocation.method(
            #getCurrentDevotionalIndex,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, int>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>>
      getLikedDevotionals() => (super.noSuchMethod(
            Invocation.method(
              #getLikedDevotionals,
              [],
            ),
            returnValue:
                _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>>.value(
                    _FakeEither_2<_i7.Failure, List<_i8.Devotional>>(
              this,
              Invocation.method(
                #getLikedDevotionals,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>>.value(
                    _FakeEither_2<_i7.Failure, List<_i8.Devotional>>(
              this,
              Invocation.method(
                #getLikedDevotionals,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.Devotional>>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, void>> updateDevotionalSavedList(
          List<_i8.Devotional>? updatedList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDevotionalSavedList,
          [updatedList],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, void>>.value(
            _FakeEither_2<_i7.Failure, void>(
          this,
          Invocation.method(
            #updateDevotionalSavedList,
            [updatedList],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, void>>.value(
                _FakeEither_2<_i7.Failure, void>(
          this,
          Invocation.method(
            #updateDevotionalSavedList,
            [updatedList],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, void>> clearDevotionals() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearDevotionals,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, void>>.value(
            _FakeEither_2<_i7.Failure, void>(
          this,
          Invocation.method(
            #clearDevotionals,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, void>>.value(
                _FakeEither_2<_i7.Failure, void>(
          this,
          Invocation.method(
            #clearDevotionals,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, void>>);
}
