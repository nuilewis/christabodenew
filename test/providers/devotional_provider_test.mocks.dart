// Mocks generated by Mockito 5.3.2 from annotations
// in christabodenew/test/providers/devotional_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:christabodenew/core/errors/failure.dart' as _i5;
import 'package:christabodenew/models/devotional_model.dart' as _i6;
import 'package:christabodenew/repositories/devotional_repository.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DevotionalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDevotionalRepository extends _i1.Mock
    implements _i3.DevotionalRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Devotional>> getCurrentDevotional() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentDevotional,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Devotional>>.value(
            _FakeEither_0<_i5.Failure, _i6.Devotional>(
          this,
          Invocation.method(
            #getCurrentDevotional,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Devotional>>.value(
                _FakeEither_0<_i5.Failure, _i6.Devotional>(
          this,
          Invocation.method(
            #getCurrentDevotional,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Devotional>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getCurrentDevotionalIndex() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentDevotionalIndex,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #getCurrentDevotionalIndex,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, int>>.value(
                _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #getCurrentDevotionalIndex,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>> getDevotionals() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevotionals,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Devotional>>(
          this,
          Invocation.method(
            #getDevotionals,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Devotional>>(
          this,
          Invocation.method(
            #getDevotionals,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>>
      getLikedDevotionals() => (super.noSuchMethod(
            Invocation.method(
              #getLikedDevotionals,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Devotional>>(
              this,
              Invocation.method(
                #getLikedDevotionals,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>>.value(
                    _FakeEither_0<_i5.Failure, List<_i6.Devotional>>(
              this,
              Invocation.method(
                #getLikedDevotionals,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Devotional>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> updateDevotionalSavedList(
          List<_i6.Devotional>? updatedList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDevotionalSavedList,
          [updatedList],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateDevotionalSavedList,
            [updatedList],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #updateDevotionalSavedList,
            [updatedList],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> clearDevotionals() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearDevotionals,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #clearDevotionals,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #clearDevotionals,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
